# on:
#   push:
#     branches:
#     - release

# jobs:
#   call-workflow-passing-data:
#     uses: ./.github/workflows/reusablerelease.yml

#
name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches:
    - release

  # Allow you to run this forkflow manually on github from the action tab
  # workflow_dispatch:


# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_CONTAINER_NAME: imageapp
  IMAGE_TAG: 1.0.${{ github.run_number }}
# outputs:
#   workflow_output1:
#     description: "The first job output"
#     value: ${{ jobs.my_job.outputs.job_output1 }}
#   workflow_output2:
#     description: "The second job output"
#     value: ${{ jobs.my_job.outputs.job_output2 }}
# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-20.04
    outputs:
      outputtag: ${{ steps.meta.outputs.tags }}
      outputlabel: ${{ steps.meta.outputs.labels }}
      output1: ${{ steps.step1.outputs.tag }}
      output2: ${{ steps.step2.outputs.label }}
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    # permissions:
    #   contents: read
    #   packages: write
    #   attestations: write
    #   id-token: write
      # 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      # - name: Log in to the Container registry
      #   uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.TOCKEN_REGISTRY }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build Docker image
        id: build
        # uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        # offitial action
        uses: docker/bake-action@v5
        with:
          context: .
          # push: true
          # tags: ${{ steps.meta.outputs.tags }}
          # labels: ${{ steps.meta.outputs.labels }}
              

      - name: Get first output tag
        id: step1
        run: |
          echo "tag=${{ steps.meta.outputs.tags }}" >> "$GITHUB_OUTPUT"
      - name: Get second output tag
        id: step2
        run: |
          echo "label=${{ steps.meta.outputs.labels }}" >> "$GITHUB_OUTPUT"
      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)." 
      # - name: Generate artifact attestation
      #   id: artifactimage
      #   uses: actions/attest-build-provenance@v1
      #   with:
      #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     push-to-registry: true

      # - name: Run container
      #   uses: docker-practice/actions-setup-docker@master
      #   timeout-minutes: 12
      # - run: |
      #     set -x
      #     docker version
      #     docker run --rm hello-world
          
  run_container_and_push_image:
    runs-on: ubuntu-20.04
    needs: build-and-push-image
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOCKEN_REGISTRY }}
      - name: Run container
        # uses: docker-practice/actions-setup-docker@master
        # timeout-minutes: 12
        run: |
          set -x
          docker version
          echo "custum tagggg :: :: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ env.IMAGE_TAG }}"
          echo "output tag:: :: ${{ needs.build-and-push-image.outputs.outputtag }}"
          docker run --name ${{ env.IMAGE_CONTAINER_NAME}} -d -p 8080:80 ${{ needs.build-and-push-image.outputs.outputtag }}
          sleep 5
          docker ps
          apk update && apk --no-cache add curl curl-dev bash
          curl "http://localhost:8080"
          echo $GITHUB_REF

      - name: Delete container
        run: |
          docker stop ${{ env.IMAGE_CONTAINER_NAME}}
          docker rm -f ${{ env.IMAGE_CONTAINER_NAME}}
      
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.2
        with:
          version: v0.56.2
          cache: true
          token: ${{ secrets.TOCKEN_REGISTRY }}
      - run: |
          trivy --version
          trivy image ${{ needs.build-and-push-image.outputs.outputtag }}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Push Docker image into github registry
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        # uses: docker/bake-action@v5
        with:
          push: true
          tags: ${{ needs.build-and-push-image.outputs.outputtag }}
          labels: ${{ needs.build-and-push-image.outputs.outputlabel }}
      
      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)." 
      - name: Generate artifact attestation
        id: artifactimage
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  my_second_job:
    name: My second job
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '14'
      - run: npm install -g bats

