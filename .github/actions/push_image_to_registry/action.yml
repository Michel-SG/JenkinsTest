name: push image
description: push image to the github registry
inputs:
  TAG: 
    description: "image tag"
    required: true
  REPOSITORY_NAME: 
    description: "name of the image"  
    required: true
  REGISTRY: 
    description: "registry name"
    required: true
  IMAGE_NAME: 
    description: "registry name"
    required: true

runs:
  using: composite
  steps:
    - name: Set the tag
      shell: bash
      run: |
        if [ -z "${{ inputs.TAG }}" ]
        then
          echo "final_tag=latest" >> $GITHUB_ENV
        else
          echo "final_tag=${{ inputs.TAG }}" >> $GITHUB_ENV
        fi

   
    # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
    # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
    # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
    # - name: Push Docker image into github registry
    #   id: push
    #   uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
    #   # uses: docker/bake-action@v5
    #   with:
    #     push: true
    #     tags: ${{ inputs.REGISTRY }}/${{ inputs.REPOSITORY_NAME}}:${{ env.final_tag }}

    # # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)." 
    # - name: Generate artifact attestation
    #   id: artifactimage
    #   uses: actions/attest-build-provenance@v1
    #   with:
    #     subject-name: ${{ inputs.REGISTRY }}/${{ inputs.REPOSITORY_NAME}}
    #     subject-digest: ${{ steps.push.outputs.digest }}
    #     push-to-registry: true
    
    # - name: Run Trivy scanner without cache
    #   uses: aquasecurity/trivy-action@0.28.0
    #   with:
    #     scan-type: 'image'
    #     scan-ref: '${{ inputs.IMAGE_NAME }}'
    #     output: 'trivy-scan-report.txt'

    - name: Install Trivy
      uses: aquasecurity/setup-trivy@v0.2.2
      with:
        version: v0.56.2
        cache: true
        token: ${{ secrets.TOCKEN_REGISTRY }}
    - name: Run Trivy scran
      shell: bash
      run: |
        trivy --version
        trivy image --format table -o trivy-scan-report.txt ${{ inputs.IMAGE_NAME }}


    - name: Check workspace
      shell: bash
      run: |
        echo " github workspace:: :: ${{ github.workspace }}"
        ls -a ${{ github.workspace }}

    - name: Upload Vulnerability Scan Results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-scan-report
        path: "${{ github.workspace }}/trivy-scan-report.txt"
        retention-days: 2  

   